{
  "version": 3,
  "sources": ["../../../../../../node_modules/langchain/dist/chains/base.js"],
  "sourcesContent": ["import { RUN_KEY } from \"@langchain/core/outputs\";\nimport { CallbackManager, parseCallbackConfigArg } from \"@langchain/core/callbacks/manager\";\nimport { ensureConfig } from \"@langchain/core/runnables\";\nimport { BaseLangChain } from \"@langchain/core/language_models/base\";\n/**\n * Base interface that all chains must implement.\n */\nexport class BaseChain extends BaseLangChain {\n  get lc_namespace() {\n    return [\"langchain\", \"chains\", this._chainType()];\n  }\n  constructor(fields, /** @deprecated */\n  verbose, /** @deprecated */\n  callbacks) {\n    if (arguments.length === 1 && typeof fields === \"object\" && !(\"saveContext\" in fields)) {\n      // fields is not a BaseMemory\n      const {\n        memory,\n        callbackManager,\n        ...rest\n      } = fields;\n      super({\n        ...rest,\n        callbacks: callbackManager ?? rest.callbacks\n      });\n      this.memory = memory;\n    } else {\n      // fields is a BaseMemory\n      super({\n        verbose,\n        callbacks\n      });\n      this.memory = fields;\n    }\n  }\n  /** @ignore */\n  _selectMemoryInputs(values) {\n    const valuesForMemory = {\n      ...values\n    };\n    if (\"signal\" in valuesForMemory) {\n      delete valuesForMemory.signal;\n    }\n    if (\"timeout\" in valuesForMemory) {\n      delete valuesForMemory.timeout;\n    }\n    return valuesForMemory;\n  }\n  /**\n   * Invoke the chain with the provided input and returns the output.\n   * @param input Input values for the chain run.\n   * @param config Optional configuration for the Runnable.\n   * @returns Promise that resolves with the output of the chain run.\n   */\n  async invoke(input, options) {\n    const config = ensureConfig(options);\n    const fullValues = await this._formatValues(input);\n    const callbackManager_ = await CallbackManager.configure(config?.callbacks, this.callbacks, config?.tags, this.tags, config?.metadata, this.metadata, {\n      verbose: this.verbose\n    });\n    const runManager = await callbackManager_?.handleChainStart(this.toJSON(), fullValues, undefined, undefined, undefined, undefined, config?.runName);\n    let outputValues;\n    try {\n      outputValues = await (fullValues.signal ? Promise.race([this._call(fullValues, runManager, config), new Promise((_, reject) => {\n        fullValues.signal?.addEventListener(\"abort\", () => {\n          reject(new Error(\"AbortError\"));\n        });\n      })]) : this._call(fullValues, runManager, config));\n    } catch (e) {\n      await runManager?.handleChainError(e);\n      throw e;\n    }\n    if (!(this.memory == null)) {\n      await this.memory.saveContext(this._selectMemoryInputs(input), outputValues);\n    }\n    await runManager?.handleChainEnd(outputValues);\n    // add the runManager's currentRunId to the outputValues\n    Object.defineProperty(outputValues, RUN_KEY, {\n      value: runManager ? {\n        runId: runManager?.runId\n      } : undefined,\n      configurable: true\n    });\n    return outputValues;\n  }\n  _validateOutputs(outputs) {\n    const missingKeys = this.outputKeys.filter(k => !(k in outputs));\n    if (missingKeys.length) {\n      throw new Error(`Missing output keys: ${missingKeys.join(\", \")} from chain ${this._chainType()}`);\n    }\n  }\n  async prepOutputs(inputs, outputs, returnOnlyOutputs = false) {\n    this._validateOutputs(outputs);\n    if (this.memory) {\n      await this.memory.saveContext(inputs, outputs);\n    }\n    if (returnOnlyOutputs) {\n      return outputs;\n    }\n    return {\n      ...inputs,\n      ...outputs\n    };\n  }\n  /**\n   * Return a json-like object representing this chain.\n   */\n  serialize() {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @deprecated Use .invoke() instead. Will be removed in 0.2.0. */\n  async run(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  input, config) {\n    const inputKeys = this.inputKeys.filter(k => !this.memory?.memoryKeys.includes(k) ?? true);\n    const isKeylessInput = inputKeys.length <= 1;\n    if (!isKeylessInput) {\n      throw new Error(`Chain ${this._chainType()} expects multiple inputs, cannot use 'run' `);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const values = inputKeys.length ? {\n      [inputKeys[0]]: input\n    } : {};\n    const returnValues = await this.call(values, config);\n    const keys = Object.keys(returnValues);\n    if (keys.length === 1) {\n      return returnValues[keys[0]];\n    }\n    throw new Error(\"return values have multiple keys, `run` only supported when one key currently\");\n  }\n  async _formatValues(values) {\n    const fullValues = {\n      ...values\n    };\n    if (fullValues.timeout && !fullValues.signal) {\n      fullValues.signal = AbortSignal.timeout(fullValues.timeout);\n      delete fullValues.timeout;\n    }\n    if (!(this.memory == null)) {\n      const newValues = await this.memory.loadMemoryVariables(this._selectMemoryInputs(values));\n      for (const [key, value] of Object.entries(newValues)) {\n        fullValues[key] = value;\n      }\n    }\n    return fullValues;\n  }\n  /**\n   * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n   *\n   * Run the core logic of this chain and add to output if desired.\n   *\n   * Wraps _call and handles memory.\n   */\n  async call(values, config, /** @deprecated */\n  tags) {\n    const parsedConfig = {\n      tags,\n      ...parseCallbackConfigArg(config)\n    };\n    return this.invoke(values, parsedConfig);\n  }\n  /**\n   * @deprecated Use .batch() instead. Will be removed in 0.2.0.\n   *\n   * Call the chain on all inputs in the list\n   */\n  async apply(inputs, config) {\n    return Promise.all(inputs.map(async (i, idx) => this.call(i, config?.[idx])));\n  }\n  /**\n   * Load a chain from a json-like object describing it.\n   */\n  static async deserialize(data, values = {}) {\n    switch (data._type) {\n      case \"llm_chain\":\n        {\n          const {\n            LLMChain\n          } = await import(\"./llm_chain.js\");\n          return LLMChain.deserialize(data);\n        }\n      case \"sequential_chain\":\n        {\n          const {\n            SequentialChain\n          } = await import(\"./sequential_chain.js\");\n          return SequentialChain.deserialize(data);\n        }\n      case \"simple_sequential_chain\":\n        {\n          const {\n            SimpleSequentialChain\n          } = await import(\"./sequential_chain.js\");\n          return SimpleSequentialChain.deserialize(data);\n        }\n      case \"stuff_documents_chain\":\n        {\n          const {\n            StuffDocumentsChain\n          } = await import(\"./combine_docs_chain.js\");\n          return StuffDocumentsChain.deserialize(data);\n        }\n      case \"map_reduce_documents_chain\":\n        {\n          const {\n            MapReduceDocumentsChain\n          } = await import(\"./combine_docs_chain.js\");\n          return MapReduceDocumentsChain.deserialize(data);\n        }\n      case \"refine_documents_chain\":\n        {\n          const {\n            RefineDocumentsChain\n          } = await import(\"./combine_docs_chain.js\");\n          return RefineDocumentsChain.deserialize(data);\n        }\n      case \"vector_db_qa\":\n        {\n          const {\n            VectorDBQAChain\n          } = await import(\"./vector_db_qa.js\");\n          return VectorDBQAChain.deserialize(data, values);\n        }\n      case \"api_chain\":\n        {\n          const {\n            APIChain\n          } = await import(\"./api/api_chain.js\");\n          return APIChain.deserialize(data);\n        }\n      default:\n        throw new Error(`Invalid prompt type in config: ${data._type}`);\n    }\n  }\n}"],
  "mappings": "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",
  "names": []
}
