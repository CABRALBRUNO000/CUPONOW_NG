{
  "version": 3,
  "sources": ["../../../../../../node_modules/langchain/dist/memory/prompt.js", "../../../../../../node_modules/langchain/dist/memory/summary.js", "../../../../../../node_modules/langchain/dist/memory/buffer_window_memory.js", "../../../../../../node_modules/langchain/dist/util/document.js", "../../../../../../node_modules/langchain/dist/memory/vector_store.js", "../../../../../../node_modules/langchain/dist/memory/stores/entity/base.js", "../../../../../../node_modules/langchain/dist/memory/stores/entity/in_memory.js", "../../../../../../node_modules/langchain/dist/memory/entity_memory.js", "../../../../../../node_modules/langchain/dist/memory/combined_memory.js", "../../../../../../node_modules/langchain/dist/memory/summary_buffer.js", "../../../../../../node_modules/langchain/dist/memory/buffer_token_memory.js"],
  "sourcesContent": ["import { PromptTemplate } from \"@langchain/core/prompts\";\nconst _DEFAULT_SUMMARIZER_TEMPLATE = `Progressively summarize the lines of conversation provided, adding onto the previous summary returning a new summary.\n\nEXAMPLE\nCurrent summary:\nThe human asks what the AI thinks of artificial intelligence. The AI thinks artificial intelligence is a force for good.\n\nNew lines of conversation:\nHuman: Why do you think artificial intelligence is a force for good?\nAI: Because artificial intelligence will help humans reach their full potential.\n\nNew summary:\nThe human asks what the AI thinks of artificial intelligence. The AI thinks artificial intelligence is a force for good because it will help humans reach their full potential.\nEND OF EXAMPLE\n\nCurrent summary:\n{summary}\n\nNew lines of conversation:\n{new_lines}\n\nNew summary:`;\n// eslint-disable-next-line spaced-comment\nexport const SUMMARY_PROMPT = /*#__PURE__*/new PromptTemplate({\n  inputVariables: [\"summary\", \"new_lines\"],\n  template: _DEFAULT_SUMMARIZER_TEMPLATE\n});\nexport const _DEFAULT_ENTITY_MEMORY_CONVERSATION_TEMPLATE = `You are an assistant to a human, powered by a large language model trained by OpenAI.\n\nYou are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.\n\nYou are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.\n\nOverall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.\n\nContext:\n{entities}\n\nCurrent conversation:\n{history}\nLast line:\nHuman: {input}\nYou:`;\nexport const ENTITY_MEMORY_CONVERSATION_TEMPLATE =\n// eslint-disable-next-line spaced-comment\n/*#__PURE__*/\nnew PromptTemplate({\n  inputVariables: [\"entities\", \"history\", \"input\"],\n  template: _DEFAULT_ENTITY_MEMORY_CONVERSATION_TEMPLATE\n});\nexport const _DEFAULT_ENTITY_EXTRACTION_TEMPLATE = `You are an AI assistant reading the transcript of a conversation between an AI and a human. Extract all of the proper nouns from the last line of conversation. As a guideline, a proper noun is generally capitalized. You should definitely extract all names and places.\n\nThe conversation history is provided just in case of a coreference (e.g. \"What do you know about him\" where \"him\" is defined in a previous line) -- ignore items mentioned there that are not in the last line.\n\nReturn the output as a single comma-separated list, or NONE if there is nothing of note to return (e.g. the user is just issuing a greeting or having a simple conversation).\n\nEXAMPLE\nConversation history:\nPerson #1: my name is Jacob. how's it going today?\nAI: \"It's going great! How about you?\"\nPerson #1: good! busy working on Langchain. lots to do.\nAI: \"That sounds like a lot of work! What kind of things are you doing to make Langchain better?\"\nLast line:\nPerson #1: i'm trying to improve Langchain's interfaces, the UX, its integrations with various products the user might want ... a lot of stuff.\nOutput: Jacob,Langchain\nEND OF EXAMPLE\n\nEXAMPLE\nConversation history:\nPerson #1: how's it going today?\nAI: \"It's going great! How about you?\"\nPerson #1: good! busy working on Langchain. lots to do.\nAI: \"That sounds like a lot of work! What kind of things are you doing to make Langchain better?\"\nLast line:\nPerson #1: i'm trying to improve Langchain's interfaces, the UX, its integrations with various products the user might want ... a lot of stuff. I'm working with Person #2.\nOutput: Langchain, Person #2\nEND OF EXAMPLE\n\nConversation history (for reference only):\n{history}\nLast line of conversation (for extraction):\nHuman: {input}\n\nOutput:`;\n// eslint-disable-next-line spaced-comment\nexport const ENTITY_EXTRACTION_PROMPT = /*#__PURE__*/new PromptTemplate({\n  inputVariables: [\"history\", \"input\"],\n  template: _DEFAULT_ENTITY_EXTRACTION_TEMPLATE\n});\nexport const _DEFAULT_ENTITY_SUMMARIZATION_TEMPLATE = `You are an AI assistant helping a human keep track of facts about relevant people, places, and concepts in their life. Update and add to the summary of the provided entity in the \"Entity\" section based on the last line of your conversation with the human. If you are writing the summary for the first time, return a single sentence.\nThe update should only include facts that are relayed in the last line of conversation about the provided entity, and should only contain facts about the provided entity.\n\nIf there is no new information about the provided entity or the information is not worth noting (not an important or relevant fact to remember long-term), output the exact string \"UNCHANGED\" below.\n\nFull conversation history (for context):\n{history}\n\nEntity to summarize:\n{entity}\n\nExisting summary of {entity}:\n{summary}\n\nLast line of conversation:\nHuman: {input}\nUpdated summary (or the exact string \"UNCHANGED\" if there is no new information about {entity} above):`;\n// eslint-disable-next-line spaced-comment\nexport const ENTITY_SUMMARIZATION_PROMPT = /*#__PURE__*/new PromptTemplate({\n  inputVariables: [\"entity\", \"summary\", \"history\", \"input\"],\n  template: _DEFAULT_ENTITY_SUMMARIZATION_TEMPLATE\n});", "import { SystemMessage, getBufferString } from \"@langchain/core/messages\";\nimport { LLMChain } from \"../chains/llm_chain.js\";\nimport { SUMMARY_PROMPT } from \"./prompt.js\";\nimport { BaseChatMemory } from \"./chat_memory.js\";\n/**\n * Abstract class that provides a structure for storing and managing the\n * memory of a conversation. It includes methods for predicting a new\n * summary for the conversation given the existing messages and summary.\n */\nexport class BaseConversationSummaryMemory extends BaseChatMemory {\n  constructor(fields) {\n    const {\n      returnMessages,\n      inputKey,\n      outputKey,\n      chatHistory,\n      humanPrefix,\n      aiPrefix,\n      llm,\n      prompt,\n      summaryChatMessageClass\n    } = fields;\n    super({\n      returnMessages,\n      inputKey,\n      outputKey,\n      chatHistory\n    });\n    Object.defineProperty(this, \"memoryKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"history\"\n    });\n    Object.defineProperty(this, \"humanPrefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"Human\"\n    });\n    Object.defineProperty(this, \"aiPrefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"AI\"\n    });\n    Object.defineProperty(this, \"llm\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"prompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: SUMMARY_PROMPT\n    });\n    Object.defineProperty(this, \"summaryChatMessageClass\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: SystemMessage\n    });\n    this.memoryKey = fields?.memoryKey ?? this.memoryKey;\n    this.humanPrefix = humanPrefix ?? this.humanPrefix;\n    this.aiPrefix = aiPrefix ?? this.aiPrefix;\n    this.llm = llm;\n    this.prompt = prompt ?? this.prompt;\n    this.summaryChatMessageClass = summaryChatMessageClass ?? this.summaryChatMessageClass;\n  }\n  /**\n   * Predicts a new summary for the conversation given the existing messages\n   * and summary.\n   * @param messages Existing messages in the conversation.\n   * @param existingSummary Current summary of the conversation.\n   * @returns A promise that resolves to a new summary string.\n   */\n  async predictNewSummary(messages, existingSummary) {\n    const newLines = getBufferString(messages, this.humanPrefix, this.aiPrefix);\n    const chain = new LLMChain({\n      llm: this.llm,\n      prompt: this.prompt\n    });\n    return await chain.predict({\n      summary: existingSummary,\n      new_lines: newLines\n    });\n  }\n}\n/**\n * Class that provides a concrete implementation of the conversation\n * memory. It includes methods for loading memory variables, saving\n * context, and clearing the memory.\n * @example\n * ```typescript\n * const memory = new ConversationSummaryMemory({\n *   memoryKey: \"chat_history\",\n *   llm: new ChatOpenAI({ modelName: \"gpt-3.5-turbo\", temperature: 0 }),\n * });\n *\n * const model = new ChatOpenAI();\n * const prompt =\n *   PromptTemplate.fromTemplate(`The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n *\n * Current conversation:\n * {chat_history}\n * Human: {input}\n * AI:`);\n * const chain = new LLMChain({ llm: model, prompt, memory });\n *\n * const res1 = await chain.call({ input: \"Hi! I'm Jim.\" });\n * console.log({ res1, memory: await memory.loadMemoryVariables({}) });\n *\n * const res2 = await chain.call({ input: \"What's my name?\" });\n * console.log({ res2, memory: await memory.loadMemoryVariables({}) });\n *\n * ```\n */\nexport class ConversationSummaryMemory extends BaseConversationSummaryMemory {\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"buffer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\"\n    });\n  }\n  get memoryKeys() {\n    return [this.memoryKey];\n  }\n  /**\n   * Loads the memory variables for the conversation memory.\n   * @returns A promise that resolves to an object containing the memory variables.\n   */\n  async loadMemoryVariables(_) {\n    if (this.returnMessages) {\n      const result = {\n        [this.memoryKey]: [new this.summaryChatMessageClass(this.buffer)]\n      };\n      return result;\n    }\n    const result = {\n      [this.memoryKey]: this.buffer\n    };\n    return result;\n  }\n  /**\n   * Saves the context of the conversation memory.\n   * @param inputValues Input values for the conversation.\n   * @param outputValues Output values from the conversation.\n   * @returns A promise that resolves when the context has been saved.\n   */\n  async saveContext(inputValues, outputValues) {\n    await super.saveContext(inputValues, outputValues);\n    const messages = await this.chatHistory.getMessages();\n    this.buffer = await this.predictNewSummary(messages.slice(-2), this.buffer);\n  }\n  /**\n   * Clears the conversation memory.\n   * @returns A promise that resolves when the memory has been cleared.\n   */\n  async clear() {\n    await super.clear();\n    this.buffer = \"\";\n  }\n}", "import { getBufferString } from \"@langchain/core/messages\";\nimport { BaseChatMemory } from \"./chat_memory.js\";\n/**\n * Class for managing and storing previous chat messages. It extends the\n * BaseChatMemory class and implements the BufferWindowMemoryInput\n * interface. This class is stateful and stores messages in a buffer. When\n * called in a chain, it returns all of the messages it has stored.\n * @example\n * ```typescript\n * const prompt =\n *   PromptTemplate.fromTemplate(`The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n * Current conversation:\n * {chat_history}\n * Human: {input}\n * AI:`);\n *\n * const chain = new LLMChain({\n *   llm: new ChatOpenAI({ temperature: 0.9 }),\n *   prompt,\n *   memory: new BufferWindowMemory({ memoryKey: \"chat_history\", k: 1 }),\n * });\n *\n * // Example of initiating a conversation with the AI\n * const res1 = await chain.call({ input: \"Hi! I'm Jim.\" });\n * console.log({ res1 });\n *\n * // Example of following up with another question\n * const res2 = await chain.call({ input: \"What's my name?\" });\n * console.log({ res2 });\n * ```\n */\nexport class BufferWindowMemory extends BaseChatMemory {\n  constructor(fields) {\n    super({\n      returnMessages: fields?.returnMessages ?? false,\n      chatHistory: fields?.chatHistory,\n      inputKey: fields?.inputKey,\n      outputKey: fields?.outputKey\n    });\n    Object.defineProperty(this, \"humanPrefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"Human\"\n    });\n    Object.defineProperty(this, \"aiPrefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"AI\"\n    });\n    Object.defineProperty(this, \"memoryKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"history\"\n    });\n    Object.defineProperty(this, \"k\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 5\n    });\n    this.humanPrefix = fields?.humanPrefix ?? this.humanPrefix;\n    this.aiPrefix = fields?.aiPrefix ?? this.aiPrefix;\n    this.memoryKey = fields?.memoryKey ?? this.memoryKey;\n    this.k = fields?.k ?? this.k;\n  }\n  get memoryKeys() {\n    return [this.memoryKey];\n  }\n  /**\n   * Method to load the memory variables. Retrieves the chat messages from\n   * the history, slices the last 'k' messages, and stores them in the\n   * memory under the memoryKey. If the returnMessages property is set to\n   * true, the method returns the messages as they are. Otherwise, it\n   * returns a string representation of the messages.\n   * @param _values InputValues object.\n   * @returns Promise that resolves to a MemoryVariables object.\n   */\n  async loadMemoryVariables(_values) {\n    const messages = await this.chatHistory.getMessages();\n    if (this.returnMessages) {\n      const result = {\n        [this.memoryKey]: messages.slice(-this.k * 2)\n      };\n      return result;\n    }\n    const result = {\n      [this.memoryKey]: getBufferString(messages.slice(-this.k * 2), this.humanPrefix, this.aiPrefix)\n    };\n    return result;\n  }\n}", "/**\n * Given a list of documents, this util formats their contents\n * into a string, separated by newlines.\n *\n * @param documents\n * @returns A string of the documents page content, separated by newlines.\n */\nexport const formatDocumentsAsString = documents => documents.map(doc => doc.pageContent).join(\"\\n\\n\");", "import { Document } from \"@langchain/core/documents\";\nimport { BaseMemory, getInputValue } from \"@langchain/core/memory\";\nimport { formatDocumentsAsString } from \"../util/document.js\";\n/**\n * Class for managing long-term memory in Large Language Model (LLM)\n * applications. It provides a way to persist and retrieve relevant\n * documents from a vector store database, which can be useful for\n * maintaining conversation history or other types of memory in an LLM\n * application.\n * @example\n * ```typescript\n * const vectorStore = new MemoryVectorStore(new OpenAIEmbeddings());\n * const memory = new VectorStoreRetrieverMemory({\n *   vectorStoreRetriever: vectorStore.asRetriever(1),\n *   memoryKey: \"history\",\n * });\n *\n * // Saving context to memory\n * await memory.saveContext(\n *   { input: \"My favorite food is pizza\" },\n *   { output: \"thats good to know\" },\n * );\n * await memory.saveContext(\n *   { input: \"My favorite sport is soccer\" },\n *   { output: \"...\" },\n * );\n * await memory.saveContext({ input: \"I don't the Celtics\" }, { output: \"ok\" });\n *\n * // Loading memory variables\n * console.log(\n *   await memory.loadMemoryVariables({ prompt: \"what sport should i watch?\" }),\n * );\n * ```\n */\nexport class VectorStoreRetrieverMemory extends BaseMemory {\n  constructor(fields) {\n    super();\n    Object.defineProperty(this, \"vectorStoreRetriever\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"inputKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"memoryKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"returnDocs\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"metadata\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.vectorStoreRetriever = fields.vectorStoreRetriever;\n    this.inputKey = fields.inputKey;\n    this.memoryKey = fields.memoryKey ?? \"memory\";\n    this.returnDocs = fields.returnDocs ?? false;\n    this.metadata = fields.metadata;\n  }\n  get memoryKeys() {\n    return [this.memoryKey];\n  }\n  /**\n   * Method to load memory variables. It uses the vectorStoreRetriever to\n   * get relevant documents based on the query obtained from the input\n   * values.\n   * @param values An InputValues object.\n   * @returns A Promise that resolves to a MemoryVariables object.\n   */\n  async loadMemoryVariables(values) {\n    const query = getInputValue(values, this.inputKey);\n    const results = await this.vectorStoreRetriever.getRelevantDocuments(query);\n    return {\n      [this.memoryKey]: this.returnDocs ? results : formatDocumentsAsString(results)\n    };\n  }\n  /**\n   * Method to save context. It constructs a document from the input and\n   * output values (excluding the memory key) and adds it to the vector\n   * store database using the vectorStoreRetriever.\n   * @param inputValues An InputValues object.\n   * @param outputValues An OutputValues object.\n   * @returns A Promise that resolves to void.\n   */\n  async saveContext(inputValues, outputValues) {\n    const metadata = typeof this.metadata === \"function\" ? this.metadata(inputValues, outputValues) : this.metadata;\n    const text = Object.entries(inputValues).filter(([k]) => k !== this.memoryKey).concat(Object.entries(outputValues)).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n    await this.vectorStoreRetriever.addDocuments([new Document({\n      pageContent: text,\n      metadata\n    })]);\n  }\n}", "import { Serializable } from \"@langchain/core/load/serializable\";\n/**\n * Base class for all entity stores. All entity stores should extend this\n * class.\n */\nexport class BaseEntityStore extends Serializable {}", "import { BaseEntityStore } from \"./base.js\";\n/**\n * An entity store that keeps data in memory. It extends from the\n * `BaseEntityStore` class and is used to store and manage entities.\n */\nexport class InMemoryEntityStore extends BaseEntityStore {\n  constructor() {\n    super();\n    Object.defineProperty(this, \"lc_namespace\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"langchain\", \"stores\", \"entity\", \"in_memory\"]\n    });\n    Object.defineProperty(this, \"store\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.store = Object.create(null);\n  }\n  /**\n   * Retrieves the value associated with the given key from the store. If\n   * the key does not exist in the store, it returns the provided default\n   * value.\n   * @param key The key to retrieve the value for.\n   * @param defaultValue The default value to return if the key does not exist in the store.\n   * @returns The value associated with the key, or the default value if the key does not exist in the store.\n   */\n  async get(key, defaultValue) {\n    return key in this.store ? this.store[key] : defaultValue;\n  }\n  /**\n   * Sets the value associated with the given key in the store.\n   * @param key The key to set the value for.\n   * @param value The value to set.\n   */\n  async set(key, value) {\n    this.store[key] = value;\n  }\n  /**\n   * Removes the key and its associated value from the store.\n   * @param key The key to remove.\n   */\n  async delete(key) {\n    delete this.store[key];\n  }\n  /**\n   * Checks if a key exists in the store.\n   * @param key The key to check.\n   * @returns A boolean indicating whether the key exists in the store.\n   */\n  async exists(key) {\n    return key in this.store;\n  }\n  /**\n   * Removes all keys and their associated values from the store.\n   */\n  async clear() {\n    this.store = Object.create(null);\n  }\n}", "import { getPromptInputKey } from \"@langchain/core/memory\";\nimport { getBufferString } from \"@langchain/core/messages\";\nimport { InMemoryEntityStore } from \"./stores/entity/in_memory.js\";\nimport { LLMChain } from \"../chains/llm_chain.js\";\nimport { ENTITY_EXTRACTION_PROMPT, ENTITY_SUMMARIZATION_PROMPT } from \"./prompt.js\";\nimport { BaseChatMemory } from \"./chat_memory.js\";\n// Entity extractor & summarizer to memory.\n/**\n * Class for managing entity extraction and summarization to memory in\n * chatbot applications. Extends the BaseChatMemory class and implements\n * the EntityMemoryInput interface.\n * @example\n * ```typescript\n * const memory = new EntityMemory({\n *   llm: new ChatOpenAI({ temperature: 0 }),\n *   chatHistoryKey: \"history\",\n *   entitiesKey: \"entities\",\n * });\n * const model = new ChatOpenAI({ temperature: 0.9 });\n * const chain = new LLMChain({\n *   llm: model,\n *   prompt: ENTITY_MEMORY_CONVERSATION_TEMPLATE,\n *   memory,\n * });\n *\n * const res1 = await chain.call({ input: \"Hi! I'm Jim.\" });\n * console.log({\n *   res1,\n *   memory: await memory.loadMemoryVariables({ input: \"Who is Jim?\" }),\n * });\n *\n * const res2 = await chain.call({\n *   input: \"I work in construction. What about you?\",\n * });\n * console.log({\n *   res2,\n *   memory: await memory.loadMemoryVariables({ input: \"Who is Jim?\" }),\n * });\n *\n * ```\n */\nexport class EntityMemory extends BaseChatMemory {\n  constructor(fields) {\n    super({\n      chatHistory: fields.chatHistory,\n      returnMessages: fields.returnMessages ?? false,\n      inputKey: fields.inputKey,\n      outputKey: fields.outputKey\n    });\n    Object.defineProperty(this, \"entityExtractionChain\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"entitySummarizationChain\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"entityStore\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"entityCache\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"k\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 3\n    });\n    Object.defineProperty(this, \"chatHistoryKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"history\"\n    });\n    Object.defineProperty(this, \"llm\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"entitiesKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"entities\"\n    });\n    Object.defineProperty(this, \"humanPrefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"aiPrefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.llm = fields.llm;\n    this.humanPrefix = fields.humanPrefix;\n    this.aiPrefix = fields.aiPrefix;\n    this.chatHistoryKey = fields.chatHistoryKey ?? this.chatHistoryKey;\n    this.entitiesKey = fields.entitiesKey ?? this.entitiesKey;\n    this.entityExtractionChain = new LLMChain({\n      llm: this.llm,\n      prompt: fields.entityExtractionPrompt ?? ENTITY_EXTRACTION_PROMPT\n    });\n    this.entitySummarizationChain = new LLMChain({\n      llm: this.llm,\n      prompt: fields.entitySummarizationPrompt ?? ENTITY_SUMMARIZATION_PROMPT\n    });\n    this.entityStore = fields.entityStore ?? new InMemoryEntityStore();\n    this.entityCache = fields.entityCache ?? this.entityCache;\n    this.k = fields.k ?? this.k;\n  }\n  get memoryKeys() {\n    return [this.chatHistoryKey];\n  }\n  // Will always return list of memory variables.\n  get memoryVariables() {\n    return [this.entitiesKey, this.chatHistoryKey];\n  }\n  // Return history buffer.\n  /**\n   * Method to load memory variables and perform entity extraction.\n   * @param inputs Input values for the method.\n   * @returns Promise resolving to an object containing memory variables.\n   */\n  async loadMemoryVariables(inputs) {\n    const promptInputKey = this.inputKey ?? getPromptInputKey(inputs, this.memoryVariables);\n    const messages = await this.chatHistory.getMessages();\n    const serializedMessages = getBufferString(messages.slice(-this.k * 2), this.humanPrefix, this.aiPrefix);\n    const output = await this.entityExtractionChain.predict({\n      history: serializedMessages,\n      input: inputs[promptInputKey]\n    });\n    const entities = output.trim() === \"NONE\" ? [] : output.split(\",\").map(w => w.trim());\n    const entitySummaries = {};\n    for (const entity of entities) {\n      entitySummaries[entity] = await this.entityStore.get(entity, \"No current information known.\");\n    }\n    this.entityCache = [...entities];\n    const buffer = this.returnMessages ? messages.slice(-this.k * 2) : serializedMessages;\n    return {\n      [this.chatHistoryKey]: buffer,\n      [this.entitiesKey]: entitySummaries\n    };\n  }\n  // Save context from this conversation to buffer.\n  /**\n   * Method to save the context from a conversation to a buffer and perform\n   * entity summarization.\n   * @param inputs Input values for the method.\n   * @param outputs Output values from the method.\n   * @returns Promise resolving to void.\n   */\n  async saveContext(inputs, outputs) {\n    await super.saveContext(inputs, outputs);\n    const promptInputKey = this.inputKey ?? getPromptInputKey(inputs, this.memoryVariables);\n    const messages = await this.chatHistory.getMessages();\n    const serializedMessages = getBufferString(messages.slice(-this.k * 2), this.humanPrefix, this.aiPrefix);\n    const inputData = inputs[promptInputKey];\n    for (const entity of this.entityCache) {\n      const existingSummary = await this.entityStore.get(entity, \"No current information known.\");\n      const output = await this.entitySummarizationChain.predict({\n        summary: existingSummary,\n        entity,\n        history: serializedMessages,\n        input: inputData\n      });\n      if (output.trim() !== \"UNCHANGED\") {\n        await this.entityStore.set(entity, output.trim());\n      }\n    }\n  }\n  // Clear memory contents.\n  /**\n   * Method to clear the memory contents.\n   * @returns Promise resolving to void.\n   */\n  async clear() {\n    await super.clear();\n    await this.entityStore.clear();\n  }\n}", "import { BaseChatMemory } from \"./chat_memory.js\";\n/**\n * Class that manages and manipulates previous chat messages. It extends\n * from the BaseChatMemory class and implements the CombinedMemoryInput\n * interface.\n */\nexport class CombinedMemory extends BaseChatMemory {\n  constructor(fields) {\n    super({\n      chatHistory: fields?.chatHistory,\n      returnMessages: fields?.returnMessages ?? false,\n      inputKey: fields?.inputKey,\n      outputKey: fields?.outputKey\n    });\n    Object.defineProperty(this, \"humanPrefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"Human\"\n    });\n    Object.defineProperty(this, \"aiPrefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"AI\"\n    });\n    Object.defineProperty(this, \"memoryKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"history\"\n    });\n    Object.defineProperty(this, \"memories\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    this.memories = fields?.memories ?? this.memories;\n    this.humanPrefix = fields?.humanPrefix ?? this.humanPrefix;\n    this.aiPrefix = fields?.aiPrefix ?? this.aiPrefix;\n    this.memoryKey = fields?.memoryKey ?? this.memoryKey;\n    this.checkRepeatedMemoryVariable();\n    this.checkInputKey();\n  }\n  /**\n   * Checks for repeated memory variables across all memory objects. Throws\n   * an error if any are found.\n   */\n  checkRepeatedMemoryVariable() {\n    const allVariables = [];\n    for (const memory of this.memories) {\n      const overlap = allVariables.filter(x => memory.memoryKeys.includes(x));\n      if (overlap.length > 0) {\n        throw new Error(`The same variables ${[...overlap]} are found in multiple memory objects, which is not allowed by CombinedMemory.`);\n      }\n      allVariables.push(...memory.memoryKeys);\n    }\n  }\n  /**\n   * Checks if input keys are set for all memory objects. Logs a warning if\n   * any are missing.\n   */\n  checkInputKey() {\n    for (const memory of this.memories) {\n      if (memory.chatHistory !== undefined && memory.inputKey === undefined) {\n        console.warn(`When using CombinedMemory, input keys should be set so the input is known. Was not set on ${memory}.`);\n      }\n    }\n  }\n  /**\n   * Loads memory variables from all memory objects.\n   * @param inputValues Input values to load memory variables from.\n   * @returns Promise that resolves with an object containing the loaded memory variables.\n   */\n  async loadMemoryVariables(inputValues) {\n    let memoryData = {};\n    for (const memory of this.memories) {\n      const data = await memory.loadMemoryVariables(inputValues);\n      memoryData = {\n        ...memoryData,\n        ...data\n      };\n    }\n    return memoryData;\n  }\n  /**\n   * Saves the context to all memory objects.\n   * @param inputValues Input values to save.\n   * @param outputValues Output values to save.\n   * @returns Promise that resolves when the context has been saved to all memory objects.\n   */\n  async saveContext(inputValues, outputValues) {\n    for (const memory of this.memories) {\n      await memory.saveContext(inputValues, outputValues);\n    }\n  }\n  /**\n   * Clears all memory objects.\n   * @returns Promise that resolves when all memory objects have been cleared.\n   */\n  async clear() {\n    for (const memory of this.memories) {\n      if (typeof memory.clear === \"function\") {\n        await memory.clear();\n      }\n    }\n  }\n  get memoryKeys() {\n    const memoryKeys = [];\n    for (const memory of this.memories) {\n      memoryKeys.push(...memory.memoryKeys);\n    }\n    return memoryKeys;\n  }\n}", "import { getBufferString } from \"@langchain/core/messages\";\nimport { BaseConversationSummaryMemory } from \"./summary.js\";\n/**\n * Class that extends BaseConversationSummaryMemory and implements\n * ConversationSummaryBufferMemoryInput. It manages the conversation\n * history in a LangChain application by maintaining a buffer of chat\n * messages and providing methods to load, save, prune, and clear the\n * memory.\n * @example\n * ```typescript\n * // Initialize the memory with a specific model and token limit\n * const memory = new ConversationSummaryBufferMemory({\n *   llm: new ChatOpenAI({ modelName: \"gpt-3.5-turbo-instruct\", temperature: 0 }),\n *   maxTokenLimit: 10,\n * });\n *\n * // Save conversation context to memory\n * await memory.saveContext({ input: \"hi\" }, { output: \"whats up\" });\n * await memory.saveContext({ input: \"not much you\" }, { output: \"not much\" });\n *\n * // Load the conversation history from memory\n * const history = await memory.loadMemoryVariables({});\n * console.log({ history });\n *\n * // Create a chat prompt using the conversation history\n * const chatPrompt = ChatPromptTemplate.fromMessages([\n *   SystemMessagePromptTemplate.fromTemplate(\n *     \"The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\",\n *   ),\n *   new MessagesPlaceholder(\"history\"),\n *   HumanMessagePromptTemplate.fromTemplate(\"{input}\"),\n * ]);\n *\n * // Initialize the conversation chain with the model, memory, and prompt\n * const chain = new ConversationChain({\n *   llm: new ChatOpenAI({ temperature: 0.9, verbose: true }),\n *   memory: memory,\n *   prompt: chatPrompt,\n * });\n * ```\n */\nexport class ConversationSummaryBufferMemory extends BaseConversationSummaryMemory {\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"movingSummaryBuffer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, \"maxTokenLimit\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 2000\n    });\n    this.maxTokenLimit = fields?.maxTokenLimit ?? this.maxTokenLimit;\n  }\n  get memoryKeys() {\n    return [this.memoryKey];\n  }\n  /**\n   * Method that loads the chat messages from the memory and returns them as\n   * a string or as a list of messages, depending on the returnMessages\n   * property.\n   * @param _ InputValues object, not used in this method.\n   * @returns Promise that resolves with MemoryVariables object containing the loaded chat messages.\n   */\n  async loadMemoryVariables(_) {\n    let buffer = await this.chatHistory.getMessages();\n    if (this.movingSummaryBuffer) {\n      buffer = [new this.summaryChatMessageClass(this.movingSummaryBuffer), ...buffer];\n    }\n    let finalBuffer;\n    if (this.returnMessages) {\n      finalBuffer = buffer;\n    } else {\n      finalBuffer = getBufferString(buffer, this.humanPrefix, this.aiPrefix);\n    }\n    return {\n      [this.memoryKey]: finalBuffer\n    };\n  }\n  /**\n   * Method that saves the context of the conversation, including the input\n   * and output values, and prunes the memory if it exceeds the maximum\n   * token limit.\n   * @param inputValues InputValues object containing the input values of the conversation.\n   * @param outputValues OutputValues object containing the output values of the conversation.\n   * @returns Promise that resolves when the context is saved and the memory is pruned.\n   */\n  async saveContext(inputValues, outputValues) {\n    await super.saveContext(inputValues, outputValues);\n    await this.prune();\n  }\n  /**\n   * Method that prunes the memory if the total number of tokens in the\n   * buffer exceeds the maxTokenLimit. It removes messages from the\n   * beginning of the buffer until the total number of tokens is within the\n   * limit.\n   * @returns Promise that resolves when the memory is pruned.\n   */\n  async prune() {\n    // Prune buffer if it exceeds max token limit\n    let buffer = await this.chatHistory.getMessages();\n    if (this.movingSummaryBuffer) {\n      buffer = [new this.summaryChatMessageClass(this.movingSummaryBuffer), ...buffer];\n    }\n    let currBufferLength = await this.llm.getNumTokens(getBufferString(buffer, this.humanPrefix, this.aiPrefix));\n    if (currBufferLength > this.maxTokenLimit) {\n      const prunedMemory = [];\n      while (currBufferLength > this.maxTokenLimit) {\n        const poppedMessage = buffer.shift();\n        if (poppedMessage) {\n          prunedMemory.push(poppedMessage);\n          currBufferLength = await this.llm.getNumTokens(getBufferString(buffer, this.humanPrefix, this.aiPrefix));\n        }\n      }\n      this.movingSummaryBuffer = await this.predictNewSummary(prunedMemory, this.movingSummaryBuffer);\n    }\n  }\n  /**\n   * Method that clears the memory and resets the movingSummaryBuffer.\n   * @returns Promise that resolves when the memory is cleared.\n   */\n  async clear() {\n    await super.clear();\n    this.movingSummaryBuffer = \"\";\n  }\n}", "import { getBufferString } from \"@langchain/core/messages\";\nimport { BaseChatMemory } from \"./chat_memory.js\";\n/**\n * Class that represents a conversation chat memory with a token buffer.\n * It extends the `BaseChatMemory` class and implements the\n * `ConversationTokenBufferMemoryInput` interface.\n * @example\n * ```typescript\n * const memory = new ConversationTokenBufferMemory({\n *   llm: new ChatOpenAI({}),\n *   maxTokenLimit: 10,\n * });\n *\n * // Save conversation context\n * await memory.saveContext({ input: \"hi\" }, { output: \"whats up\" });\n * await memory.saveContext({ input: \"not much you\" }, { output: \"not much\" });\n *\n * // Load memory variables\n * const result = await memory.loadMemoryVariables({});\n * console.log(result);\n * ```\n */\nexport class ConversationTokenBufferMemory extends BaseChatMemory {\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"humanPrefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"Human\"\n    });\n    Object.defineProperty(this, \"aiPrefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"AI\"\n    });\n    Object.defineProperty(this, \"memoryKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"history\"\n    });\n    Object.defineProperty(this, \"maxTokenLimit\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 2000\n    }); // Default max token limit of 2000 which can be overridden\n    Object.defineProperty(this, \"llm\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.llm = fields.llm;\n    this.humanPrefix = fields?.humanPrefix ?? this.humanPrefix;\n    this.aiPrefix = fields?.aiPrefix ?? this.aiPrefix;\n    this.memoryKey = fields?.memoryKey ?? this.memoryKey;\n    this.maxTokenLimit = fields?.maxTokenLimit ?? this.maxTokenLimit;\n  }\n  get memoryKeys() {\n    return [this.memoryKey];\n  }\n  /**\n   * Loads the memory variables. It takes an `InputValues` object as a\n   * parameter and returns a `Promise` that resolves with a\n   * `MemoryVariables` object.\n   * @param _values `InputValues` object.\n   * @returns A `Promise` that resolves with a `MemoryVariables` object.\n   */\n  async loadMemoryVariables(_values) {\n    const messages = await this.chatHistory.getMessages();\n    if (this.returnMessages) {\n      const result = {\n        [this.memoryKey]: messages\n      };\n      return result;\n    }\n    const result = {\n      [this.memoryKey]: getBufferString(messages, this.humanPrefix, this.aiPrefix)\n    };\n    return result;\n  }\n  /**\n   * Saves the context from this conversation to buffer. If the amount\n   * of tokens required to save the buffer exceeds MAX_TOKEN_LIMIT,\n   * prune it.\n   */\n  async saveContext(inputValues, outputValues) {\n    await super.saveContext(inputValues, outputValues);\n    // Prune buffer if it exceeds the max token limit set for this instance.\n    const buffer = await this.chatHistory.getMessages();\n    let currBufferLength = await this.llm.getNumTokens(getBufferString(buffer, this.humanPrefix, this.aiPrefix));\n    if (currBufferLength > this.maxTokenLimit) {\n      const prunedMemory = [];\n      while (currBufferLength > this.maxTokenLimit) {\n        prunedMemory.push(buffer.shift());\n        currBufferLength = await this.llm.getNumTokens(getBufferString(buffer, this.humanPrefix, this.aiPrefix));\n      }\n    }\n  }\n}"],
  "mappings": "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",
  "names": ["result", "result", "result"]
}
