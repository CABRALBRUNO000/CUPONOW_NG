{
  "version": 3,
  "sources": ["../../../../../../node_modules/@langchain/core/dist/prompts/image.js", "../../../../../../node_modules/@langchain/core/dist/prompts/chat.js", "../../../../../../node_modules/@langchain/core/dist/prompts/few_shot.js"],
  "sourcesContent": ["import { ImagePromptValue } from \"../prompt_values.js\";\nimport { BasePromptTemplate } from \"./base.js\";\nimport { checkValidTemplate, renderTemplate } from \"./template.js\";\n/**\n * An image prompt template for a multimodal model.\n */\nexport class ImagePromptTemplate extends BasePromptTemplate {\n  static lc_name() {\n    return \"ImagePromptTemplate\";\n  }\n  constructor(input) {\n    super(input);\n    Object.defineProperty(this, \"lc_namespace\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"langchain_core\", \"prompts\", \"image\"]\n    });\n    Object.defineProperty(this, \"template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"templateFormat\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"f-string\"\n    });\n    Object.defineProperty(this, \"validateTemplate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    /**\n     * Additional fields which should be included inside\n     * the message content array if using a complex message\n     * content.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Object.defineProperty(this, \"additionalContentFields\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.template = input.template;\n    this.templateFormat = input.templateFormat ?? this.templateFormat;\n    this.validateTemplate = input.validateTemplate ?? this.validateTemplate;\n    this.additionalContentFields = input.additionalContentFields;\n    if (this.validateTemplate) {\n      let totalInputVariables = this.inputVariables;\n      if (this.partialVariables) {\n        totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n      }\n      checkValidTemplate([{\n        type: \"image_url\",\n        image_url: this.template\n      }], this.templateFormat, totalInputVariables);\n    }\n  }\n  _getPromptType() {\n    return \"prompt\";\n  }\n  /**\n   * Partially applies values to the prompt template.\n   * @param values The values to be partially applied to the prompt template.\n   * @returns A new instance of ImagePromptTemplate with the partially applied values.\n   */\n  async partial(values) {\n    const newInputVariables = this.inputVariables.filter(iv => !(iv in values));\n    const newPartialVariables = {\n      ...(this.partialVariables ?? {}),\n      ...values\n    };\n    const promptDict = {\n      ...this,\n      inputVariables: newInputVariables,\n      partialVariables: newPartialVariables\n    };\n    return new ImagePromptTemplate(promptDict);\n  }\n  /**\n   * Formats the prompt template with the provided values.\n   * @param values The values to be used to format the prompt template.\n   * @returns A promise that resolves to a string which is the formatted prompt.\n   */\n  async format(values) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const formatted = {};\n    for (const [key, value] of Object.entries(this.template)) {\n      if (typeof value === \"string\") {\n        formatted[key] = renderTemplate(value, this.templateFormat, values);\n      } else {\n        formatted[key] = value;\n      }\n    }\n    const url = values.url || formatted.url;\n    const detail = values.detail || formatted.detail;\n    if (!url) {\n      throw new Error(\"Must provide either an image URL.\");\n    }\n    if (typeof url !== \"string\") {\n      throw new Error(\"url must be a string.\");\n    }\n    const output = {\n      url\n    };\n    if (detail) {\n      output.detail = detail;\n    }\n    return output;\n  }\n  /**\n   * Formats the prompt given the input values and returns a formatted\n   * prompt value.\n   * @param values The input values to format the prompt.\n   * @returns A Promise that resolves to a formatted prompt value.\n   */\n  async formatPromptValue(values) {\n    const formattedPrompt = await this.format(values);\n    return new ImagePromptValue(formattedPrompt);\n  }\n}", "// Default generic \"any\" values are for backwards compatibility.\n// Replace with \"string\" when we are comfortable with a breaking change.\nimport { AIMessage, HumanMessage, SystemMessage, BaseMessage, ChatMessage, coerceMessageLikeToMessage, isBaseMessage } from \"../messages/index.js\";\nimport { ChatPromptValue } from \"../prompt_values.js\";\nimport { Runnable } from \"../runnables/base.js\";\nimport { BaseStringPromptTemplate } from \"./string.js\";\nimport { BasePromptTemplate } from \"./base.js\";\nimport { PromptTemplate } from \"./prompt.js\";\nimport { ImagePromptTemplate } from \"./image.js\";\nimport { parseFString, parseMustache } from \"./template.js\";\nimport { addLangChainErrorFields } from \"../errors/index.js\";\n/**\n * Abstract class that serves as a base for creating message prompt\n * templates. It defines how to format messages for different roles in a\n * conversation.\n */\nexport class BaseMessagePromptTemplate extends Runnable {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"lc_namespace\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"langchain_core\", \"prompts\", \"chat\"]\n    });\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n  }\n  /**\n   * Calls the formatMessages method with the provided input and options.\n   * @param input Input for the formatMessages method\n   * @param options Optional BaseCallbackConfig\n   * @returns Formatted output messages\n   */\n  async invoke(input, options) {\n    return this._callWithConfig(input => this.formatMessages(input), input, {\n      ...options,\n      runType: \"prompt\"\n    });\n  }\n}\n/**\n * Class that represents a placeholder for messages in a chat prompt. It\n * extends the BaseMessagePromptTemplate.\n */\nexport class MessagesPlaceholder extends BaseMessagePromptTemplate {\n  static lc_name() {\n    return \"MessagesPlaceholder\";\n  }\n  constructor(fields) {\n    if (typeof fields === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      fields = {\n        variableName: fields\n      };\n    }\n    super(fields);\n    Object.defineProperty(this, \"variableName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"optional\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.variableName = fields.variableName;\n    this.optional = fields.optional ?? false;\n  }\n  get inputVariables() {\n    return [this.variableName];\n  }\n  async formatMessages(values) {\n    const input = values[this.variableName];\n    if (this.optional && !input) {\n      return [];\n    } else if (!input) {\n      const error = new Error(`Field \"${this.variableName}\" in prompt uses a MessagesPlaceholder, which expects an array of BaseMessages as an input value. Received: undefined`);\n      error.name = \"InputFormatError\";\n      throw error;\n    }\n    let formattedMessages;\n    try {\n      if (Array.isArray(input)) {\n        formattedMessages = input.map(coerceMessageLikeToMessage);\n      } else {\n        formattedMessages = [coerceMessageLikeToMessage(input)];\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e) {\n      const readableInput = typeof input === \"string\" ? input : JSON.stringify(input, null, 2);\n      const error = new Error([`Field \"${this.variableName}\" in prompt uses a MessagesPlaceholder, which expects an array of BaseMessages or coerceable values as input.`, `Received value: ${readableInput}`, `Additional message: ${e.message}`].join(\"\\n\\n\"));\n      error.name = \"InputFormatError\";\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      error.lc_error_code = e.lc_error_code;\n      throw error;\n    }\n    return formattedMessages;\n  }\n}\n/**\n * Abstract class that serves as a base for creating message string prompt\n * templates. It extends the BaseMessagePromptTemplate.\n */\nexport class BaseMessageStringPromptTemplate extends BaseMessagePromptTemplate {\n  constructor(fields) {\n    if (!(\"prompt\" in fields)) {\n      // eslint-disable-next-line no-param-reassign\n      fields = {\n        prompt: fields\n      };\n    }\n    super(fields);\n    Object.defineProperty(this, \"prompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.prompt = fields.prompt;\n  }\n  get inputVariables() {\n    return this.prompt.inputVariables;\n  }\n  async formatMessages(values) {\n    return [await this.format(values)];\n  }\n}\n/**\n * Abstract class that serves as a base for creating chat prompt\n * templates. It extends the BasePromptTemplate.\n */\nexport class BaseChatPromptTemplate extends BasePromptTemplate {\n  constructor(input) {\n    super(input);\n  }\n  async format(values) {\n    return (await this.formatPromptValue(values)).toString();\n  }\n  async formatPromptValue(values) {\n    const resultMessages = await this.formatMessages(values);\n    return new ChatPromptValue(resultMessages);\n  }\n}\n/**\n * Class that represents a chat message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */\nexport class ChatMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n  static lc_name() {\n    return \"ChatMessagePromptTemplate\";\n  }\n  constructor(fields, role) {\n    if (!(\"prompt\" in fields)) {\n      // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n      fields = {\n        prompt: fields,\n        role: role\n      };\n    }\n    super(fields);\n    Object.defineProperty(this, \"role\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.role = fields.role;\n  }\n  async format(values) {\n    return new ChatMessage(await this.prompt.format(values), this.role);\n  }\n  static fromTemplate(template, role, options) {\n    return new this(PromptTemplate.fromTemplate(template, {\n      templateFormat: options?.templateFormat\n    }), role);\n  }\n}\nclass _StringImageMessagePromptTemplate extends BaseMessagePromptTemplate {\n  static _messageClass() {\n    throw new Error(\"Can not invoke _messageClass from inside _StringImageMessagePromptTemplate\");\n  }\n  constructor(/** @TODO When we come up with a better way to type prompt templates, fix this */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  fields, additionalOptions) {\n    if (!(\"prompt\" in fields)) {\n      // eslint-disable-next-line no-param-reassign\n      fields = {\n        prompt: fields\n      };\n    }\n    super(fields);\n    Object.defineProperty(this, \"lc_namespace\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"langchain_core\", \"prompts\", \"chat\"]\n    });\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"inputVariables\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"additionalOptions\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"prompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"messageClass\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    // ChatMessage contains role field, others don't.\n    // Because of this, we have a separate class property for ChatMessage.\n    Object.defineProperty(this, \"chatMessageClass\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.prompt = fields.prompt;\n    if (Array.isArray(this.prompt)) {\n      let inputVariables = [];\n      this.prompt.forEach(prompt => {\n        if (\"inputVariables\" in prompt) {\n          inputVariables = inputVariables.concat(prompt.inputVariables);\n        }\n      });\n      this.inputVariables = inputVariables;\n    } else {\n      this.inputVariables = this.prompt.inputVariables;\n    }\n    this.additionalOptions = additionalOptions ?? this.additionalOptions;\n  }\n  createMessage(content) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const constructor = this.constructor;\n    if (constructor._messageClass()) {\n      const MsgClass = constructor._messageClass();\n      return new MsgClass({\n        content\n      });\n    } else if (constructor.chatMessageClass) {\n      const MsgClass = constructor.chatMessageClass();\n      // Assuming ChatMessage constructor also takes a content argument\n      return new MsgClass({\n        content,\n        role: this.getRoleFromMessageClass(MsgClass.lc_name())\n      });\n    } else {\n      throw new Error(\"No message class defined\");\n    }\n  }\n  getRoleFromMessageClass(name) {\n    switch (name) {\n      case \"HumanMessage\":\n        return \"human\";\n      case \"AIMessage\":\n        return \"ai\";\n      case \"SystemMessage\":\n        return \"system\";\n      case \"ChatMessage\":\n        return \"chat\";\n      default:\n        throw new Error(\"Invalid message class name\");\n    }\n  }\n  static fromTemplate(template, additionalOptions) {\n    if (typeof template === \"string\") {\n      return new this(PromptTemplate.fromTemplate(template, additionalOptions));\n    }\n    const prompt = [];\n    for (const item of template) {\n      if (typeof item === \"string\" || typeof item === \"object\" && \"text\" in item) {\n        let text = \"\";\n        if (typeof item === \"string\") {\n          text = item;\n        } else if (typeof item.text === \"string\") {\n          text = item.text ?? \"\";\n        }\n        const options = {\n          ...additionalOptions,\n          ...(typeof item !== \"string\" ? {\n            additionalContentFields: item\n          } : {})\n        };\n        prompt.push(PromptTemplate.fromTemplate(text, options));\n      } else if (typeof item === \"object\" && \"image_url\" in item) {\n        let imgTemplate = item.image_url ?? \"\";\n        let imgTemplateObject;\n        let inputVariables = [];\n        if (typeof imgTemplate === \"string\") {\n          let parsedTemplate;\n          if (additionalOptions?.templateFormat === \"mustache\") {\n            parsedTemplate = parseMustache(imgTemplate);\n          } else {\n            parsedTemplate = parseFString(imgTemplate);\n          }\n          const variables = parsedTemplate.flatMap(item => item.type === \"variable\" ? [item.name] : []);\n          if ((variables?.length ?? 0) > 0) {\n            if (variables.length > 1) {\n              throw new Error(`Only one format variable allowed per image template.\\nGot: ${variables}\\nFrom: ${imgTemplate}`);\n            }\n            inputVariables = [variables[0]];\n          } else {\n            inputVariables = [];\n          }\n          imgTemplate = {\n            url: imgTemplate\n          };\n          imgTemplateObject = new ImagePromptTemplate({\n            template: imgTemplate,\n            inputVariables,\n            templateFormat: additionalOptions?.templateFormat,\n            additionalContentFields: item\n          });\n        } else if (typeof imgTemplate === \"object\") {\n          if (\"url\" in imgTemplate) {\n            let parsedTemplate;\n            if (additionalOptions?.templateFormat === \"mustache\") {\n              parsedTemplate = parseMustache(imgTemplate.url);\n            } else {\n              parsedTemplate = parseFString(imgTemplate.url);\n            }\n            inputVariables = parsedTemplate.flatMap(item => item.type === \"variable\" ? [item.name] : []);\n          } else {\n            inputVariables = [];\n          }\n          imgTemplateObject = new ImagePromptTemplate({\n            template: imgTemplate,\n            inputVariables,\n            templateFormat: additionalOptions?.templateFormat,\n            additionalContentFields: item\n          });\n        } else {\n          throw new Error(\"Invalid image template\");\n        }\n        prompt.push(imgTemplateObject);\n      }\n    }\n    return new this({\n      prompt,\n      additionalOptions\n    });\n  }\n  async format(input) {\n    // eslint-disable-next-line no-instanceof/no-instanceof\n    if (this.prompt instanceof BaseStringPromptTemplate) {\n      const text = await this.prompt.format(input);\n      return this.createMessage(text);\n    } else {\n      const content = [];\n      for (const prompt of this.prompt) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let inputs = {};\n        if (!(\"inputVariables\" in prompt)) {\n          throw new Error(`Prompt ${prompt} does not have inputVariables defined.`);\n        }\n        for (const item of prompt.inputVariables) {\n          if (!inputs) {\n            inputs = {\n              [item]: input[item]\n            };\n          }\n          inputs = {\n            ...inputs,\n            [item]: input[item]\n          };\n        }\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (prompt instanceof BaseStringPromptTemplate) {\n          const formatted = await prompt.format(inputs);\n          let additionalContentFields;\n          if (\"additionalContentFields\" in prompt) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            additionalContentFields = prompt.additionalContentFields;\n          }\n          content.push({\n            ...additionalContentFields,\n            type: \"text\",\n            text: formatted\n          });\n          /** @TODO replace this */\n          // eslint-disable-next-line no-instanceof/no-instanceof\n        } else if (prompt instanceof ImagePromptTemplate) {\n          const formatted = await prompt.format(inputs);\n          let additionalContentFields;\n          if (\"additionalContentFields\" in prompt) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            additionalContentFields = prompt.additionalContentFields;\n          }\n          content.push({\n            ...additionalContentFields,\n            type: \"image_url\",\n            image_url: formatted\n          });\n        }\n      }\n      return this.createMessage(content);\n    }\n  }\n  async formatMessages(values) {\n    return [await this.format(values)];\n  }\n}\n/**\n * Class that represents a human message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n * @example\n * ```typescript\n * const message = HumanMessagePromptTemplate.fromTemplate(\"{text}\");\n * const formatted = await message.format({ text: \"Hello world!\" });\n *\n * const chatPrompt = ChatPromptTemplate.fromMessages([message]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class HumanMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n  static _messageClass() {\n    return HumanMessage;\n  }\n  static lc_name() {\n    return \"HumanMessagePromptTemplate\";\n  }\n}\n/**\n * Class that represents an AI message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */\nexport class AIMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n  static _messageClass() {\n    return AIMessage;\n  }\n  static lc_name() {\n    return \"AIMessagePromptTemplate\";\n  }\n}\n/**\n * Class that represents a system message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n * @example\n * ```typescript\n * const message = SystemMessagePromptTemplate.fromTemplate(\"{text}\");\n * const formatted = await message.format({ text: \"Hello world!\" });\n *\n * const chatPrompt = ChatPromptTemplate.fromMessages([message]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class SystemMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n  static _messageClass() {\n    return SystemMessage;\n  }\n  static lc_name() {\n    return \"SystemMessagePromptTemplate\";\n  }\n}\nfunction _isBaseMessagePromptTemplate(baseMessagePromptTemplateLike) {\n  return typeof baseMessagePromptTemplateLike.formatMessages === \"function\";\n}\nfunction _coerceMessagePromptTemplateLike(messagePromptTemplateLike, extra) {\n  if (_isBaseMessagePromptTemplate(messagePromptTemplateLike) || isBaseMessage(messagePromptTemplateLike)) {\n    return messagePromptTemplateLike;\n  }\n  if (Array.isArray(messagePromptTemplateLike) && messagePromptTemplateLike[0] === \"placeholder\") {\n    const messageContent = messagePromptTemplateLike[1];\n    if (typeof messageContent !== \"string\" || messageContent[0] !== \"{\" || messageContent[messageContent.length - 1] !== \"}\") {\n      throw new Error(`Invalid placeholder template: \"${messagePromptTemplateLike[1]}\". Expected a variable name surrounded by curly braces.`);\n    }\n    const variableName = messageContent.slice(1, -1);\n    return new MessagesPlaceholder({\n      variableName,\n      optional: true\n    });\n  }\n  const message = coerceMessageLikeToMessage(messagePromptTemplateLike);\n  let templateData;\n  if (typeof message.content === \"string\") {\n    templateData = message.content;\n  } else {\n    // Assuming message.content is an array of complex objects, transform it.\n    templateData = message.content.map(item => {\n      if (\"text\" in item) {\n        return {\n          ...item,\n          text: item.text\n        };\n      } else if (\"image_url\" in item) {\n        return {\n          ...item,\n          image_url: item.image_url\n        };\n      } else {\n        return item;\n      }\n    });\n  }\n  if (message._getType() === \"human\") {\n    return HumanMessagePromptTemplate.fromTemplate(templateData, extra);\n  } else if (message._getType() === \"ai\") {\n    return AIMessagePromptTemplate.fromTemplate(templateData, extra);\n  } else if (message._getType() === \"system\") {\n    return SystemMessagePromptTemplate.fromTemplate(templateData, extra);\n  } else if (ChatMessage.isInstance(message)) {\n    return ChatMessagePromptTemplate.fromTemplate(message.content, message.role, extra);\n  } else {\n    throw new Error(`Could not coerce message prompt template from input. Received message type: \"${message._getType()}\".`);\n  }\n}\nfunction isMessagesPlaceholder(x) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return x.constructor.lc_name() === \"MessagesPlaceholder\";\n}\n/**\n * Class that represents a chat prompt. It extends the\n * BaseChatPromptTemplate and uses an array of BaseMessagePromptTemplate\n * instances to format a series of messages for a conversation.\n * @example\n * ```typescript\n * const message = SystemMessagePromptTemplate.fromTemplate(\"{text}\");\n * const chatPrompt = ChatPromptTemplate.fromMessages([\n *   [\"ai\", \"You are a helpful assistant.\"],\n *   message,\n * ]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class ChatPromptTemplate extends BaseChatPromptTemplate {\n  static lc_name() {\n    return \"ChatPromptTemplate\";\n  }\n  get lc_aliases() {\n    return {\n      promptMessages: \"messages\"\n    };\n  }\n  constructor(input) {\n    super(input);\n    Object.defineProperty(this, \"promptMessages\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"validateTemplate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"templateFormat\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"f-string\"\n    });\n    // If input is mustache and validateTemplate is not defined, set it to false\n    if (input.templateFormat === \"mustache\" && input.validateTemplate === undefined) {\n      this.validateTemplate = false;\n    }\n    Object.assign(this, input);\n    if (this.validateTemplate) {\n      const inputVariablesMessages = new Set();\n      for (const promptMessage of this.promptMessages) {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (promptMessage instanceof BaseMessage) continue;\n        for (const inputVariable of promptMessage.inputVariables) {\n          inputVariablesMessages.add(inputVariable);\n        }\n      }\n      const totalInputVariables = this.inputVariables;\n      const inputVariablesInstance = new Set(this.partialVariables ? totalInputVariables.concat(Object.keys(this.partialVariables)) : totalInputVariables);\n      const difference = new Set([...inputVariablesInstance].filter(x => !inputVariablesMessages.has(x)));\n      if (difference.size > 0) {\n        throw new Error(`Input variables \\`${[...difference]}\\` are not used in any of the prompt messages.`);\n      }\n      const otherDifference = new Set([...inputVariablesMessages].filter(x => !inputVariablesInstance.has(x)));\n      if (otherDifference.size > 0) {\n        throw new Error(`Input variables \\`${[...otherDifference]}\\` are used in prompt messages but not in the prompt template.`);\n      }\n    }\n  }\n  _getPromptType() {\n    return \"chat\";\n  }\n  async _parseImagePrompts(message, inputValues) {\n    if (typeof message.content === \"string\") {\n      return message;\n    }\n    const formattedMessageContent = await Promise.all(message.content.map(async item => {\n      if (item.type !== \"image_url\") {\n        return item;\n      }\n      let imageUrl = \"\";\n      if (typeof item.image_url === \"string\") {\n        imageUrl = item.image_url;\n      } else {\n        imageUrl = item.image_url.url;\n      }\n      const promptTemplatePlaceholder = PromptTemplate.fromTemplate(imageUrl, {\n        templateFormat: this.templateFormat\n      });\n      const formattedUrl = await promptTemplatePlaceholder.format(inputValues);\n      if (typeof item.image_url !== \"string\" && \"url\" in item.image_url) {\n        // eslint-disable-next-line no-param-reassign\n        item.image_url.url = formattedUrl;\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        item.image_url = formattedUrl;\n      }\n      return item;\n    }));\n    // eslint-disable-next-line no-param-reassign\n    message.content = formattedMessageContent;\n    return message;\n  }\n  async formatMessages(values) {\n    const allValues = await this.mergePartialAndUserVariables(values);\n    let resultMessages = [];\n    for (const promptMessage of this.promptMessages) {\n      // eslint-disable-next-line no-instanceof/no-instanceof\n      if (promptMessage instanceof BaseMessage) {\n        resultMessages.push(await this._parseImagePrompts(promptMessage, allValues));\n      } else {\n        const inputValues = promptMessage.inputVariables.reduce((acc, inputVariable) => {\n          if (!(inputVariable in allValues) && !(isMessagesPlaceholder(promptMessage) && promptMessage.optional)) {\n            const error = addLangChainErrorFields(new Error(`Missing value for input variable \\`${inputVariable.toString()}\\``), \"INVALID_PROMPT_INPUT\");\n            throw error;\n          }\n          acc[inputVariable] = allValues[inputVariable];\n          return acc;\n        }, {});\n        const message = await promptMessage.formatMessages(inputValues);\n        resultMessages = resultMessages.concat(message);\n      }\n    }\n    return resultMessages;\n  }\n  async partial(values) {\n    // This is implemented in a way it doesn't require making\n    // BaseMessagePromptTemplate aware of .partial()\n    const newInputVariables = this.inputVariables.filter(iv => !(iv in values));\n    const newPartialVariables = {\n      ...(this.partialVariables ?? {}),\n      ...values\n    };\n    const promptDict = {\n      ...this,\n      inputVariables: newInputVariables,\n      partialVariables: newPartialVariables\n    };\n    return new ChatPromptTemplate(promptDict);\n  }\n  static fromTemplate(template, options) {\n    const prompt = PromptTemplate.fromTemplate(template, options);\n    const humanTemplate = new HumanMessagePromptTemplate({\n      prompt\n    });\n    return this.fromMessages([humanTemplate]);\n  }\n  /**\n   * Create a chat model-specific prompt from individual chat messages\n   * or message-like tuples.\n   * @param promptMessages Messages to be passed to the chat model\n   * @returns A new ChatPromptTemplate\n   */\n  static fromMessages(promptMessages, extra) {\n    const flattenedMessages = promptMessages.reduce((acc, promptMessage) => acc.concat(\n    // eslint-disable-next-line no-instanceof/no-instanceof\n    promptMessage instanceof ChatPromptTemplate ? promptMessage.promptMessages : [_coerceMessagePromptTemplateLike(promptMessage, extra)]), []);\n    const flattenedPartialVariables = promptMessages.reduce((acc, promptMessage) =>\n    // eslint-disable-next-line no-instanceof/no-instanceof\n    promptMessage instanceof ChatPromptTemplate ? Object.assign(acc, promptMessage.partialVariables) : acc, Object.create(null));\n    const inputVariables = new Set();\n    for (const promptMessage of flattenedMessages) {\n      // eslint-disable-next-line no-instanceof/no-instanceof\n      if (promptMessage instanceof BaseMessage) continue;\n      for (const inputVariable of promptMessage.inputVariables) {\n        if (inputVariable in flattenedPartialVariables) {\n          continue;\n        }\n        inputVariables.add(inputVariable);\n      }\n    }\n    return new this({\n      ...extra,\n      inputVariables: [...inputVariables],\n      promptMessages: flattenedMessages,\n      partialVariables: flattenedPartialVariables,\n      templateFormat: extra?.templateFormat\n    });\n  }\n  /** @deprecated Renamed to .fromMessages */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static fromPromptMessages(promptMessages) {\n    return this.fromMessages(promptMessages);\n  }\n}", "import { BaseStringPromptTemplate } from \"./string.js\";\nimport { checkValidTemplate, renderTemplate } from \"./template.js\";\nimport { PromptTemplate } from \"./prompt.js\";\nimport { BaseChatPromptTemplate } from \"./chat.js\";\n/**\n * Prompt template that contains few-shot examples.\n * @augments BasePromptTemplate\n * @augments FewShotPromptTemplateInput\n * @example\n * ```typescript\n * const examplePrompt = PromptTemplate.fromTemplate(\n *   \"Input: {input}\\nOutput: {output}\",\n * );\n *\n * const exampleSelector = await SemanticSimilarityExampleSelector.fromExamples(\n *   [\n *     { input: \"happy\", output: \"sad\" },\n *     { input: \"tall\", output: \"short\" },\n *     { input: \"energetic\", output: \"lethargic\" },\n *     { input: \"sunny\", output: \"gloomy\" },\n *     { input: \"windy\", output: \"calm\" },\n *   ],\n *   new OpenAIEmbeddings(),\n *   HNSWLib,\n *   { k: 1 },\n * );\n *\n * const dynamicPrompt = new FewShotPromptTemplate({\n *   exampleSelector,\n *   examplePrompt,\n *   prefix: \"Give the antonym of every input\",\n *   suffix: \"Input: {adjective}\\nOutput:\",\n *   inputVariables: [\"adjective\"],\n * });\n *\n * // Format the dynamic prompt with the input 'rainy'\n * console.log(await dynamicPrompt.format({ adjective: \"rainy\" }));\n *\n * ```\n */\nexport class FewShotPromptTemplate extends BaseStringPromptTemplate {\n  constructor(input) {\n    super(input);\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"examples\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"exampleSelector\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"examplePrompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"suffix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, \"exampleSeparator\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\\n\\n\"\n    });\n    Object.defineProperty(this, \"prefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, \"templateFormat\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"f-string\"\n    });\n    Object.defineProperty(this, \"validateTemplate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.assign(this, input);\n    if (this.examples !== undefined && this.exampleSelector !== undefined) {\n      throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n    }\n    if (this.examples === undefined && this.exampleSelector === undefined) {\n      throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    if (this.validateTemplate) {\n      let totalInputVariables = this.inputVariables;\n      if (this.partialVariables) {\n        totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n      }\n      checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n    }\n  }\n  _getPromptType() {\n    return \"few_shot\";\n  }\n  static lc_name() {\n    return \"FewShotPromptTemplate\";\n  }\n  async getExamples(inputVariables) {\n    if (this.examples !== undefined) {\n      return this.examples;\n    }\n    if (this.exampleSelector !== undefined) {\n      return this.exampleSelector.selectExamples(inputVariables);\n    }\n    throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n  }\n  async partial(values) {\n    const newInputVariables = this.inputVariables.filter(iv => !(iv in values));\n    const newPartialVariables = {\n      ...(this.partialVariables ?? {}),\n      ...values\n    };\n    const promptDict = {\n      ...this,\n      inputVariables: newInputVariables,\n      partialVariables: newPartialVariables\n    };\n    return new FewShotPromptTemplate(promptDict);\n  }\n  /**\n   * Formats the prompt with the given values.\n   * @param values The values to format the prompt with.\n   * @returns A promise that resolves to a string representing the formatted prompt.\n   */\n  async format(values) {\n    const allValues = await this.mergePartialAndUserVariables(values);\n    const examples = await this.getExamples(allValues);\n    const exampleStrings = await Promise.all(examples.map(example => this.examplePrompt.format(example)));\n    const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n    return renderTemplate(template, this.templateFormat, allValues);\n  }\n  serialize() {\n    if (this.exampleSelector || !this.examples) {\n      throw new Error(\"Serializing an example selector is not currently supported\");\n    }\n    if (this.outputParser !== undefined) {\n      throw new Error(\"Serializing an output parser is not currently supported\");\n    }\n    return {\n      _type: this._getPromptType(),\n      input_variables: this.inputVariables,\n      example_prompt: this.examplePrompt.serialize(),\n      example_separator: this.exampleSeparator,\n      suffix: this.suffix,\n      prefix: this.prefix,\n      template_format: this.templateFormat,\n      examples: this.examples\n    };\n  }\n  static async deserialize(data) {\n    const {\n      example_prompt\n    } = data;\n    if (!example_prompt) {\n      throw new Error(\"Missing example prompt\");\n    }\n    const examplePrompt = await PromptTemplate.deserialize(example_prompt);\n    let examples;\n    if (Array.isArray(data.examples)) {\n      examples = data.examples;\n    } else {\n      throw new Error(\"Invalid examples format. Only list or string are supported.\");\n    }\n    return new FewShotPromptTemplate({\n      inputVariables: data.input_variables,\n      examplePrompt,\n      examples,\n      exampleSeparator: data.example_separator,\n      prefix: data.prefix,\n      suffix: data.suffix,\n      templateFormat: data.template_format\n    });\n  }\n}\n/**\n * Chat prompt template that contains few-shot examples.\n * @augments BasePromptTemplateInput\n * @augments FewShotChatMessagePromptTemplateInput\n */\nexport class FewShotChatMessagePromptTemplate extends BaseChatPromptTemplate {\n  _getPromptType() {\n    return \"few_shot_chat\";\n  }\n  static lc_name() {\n    return \"FewShotChatMessagePromptTemplate\";\n  }\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"examples\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"exampleSelector\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"examplePrompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"suffix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, \"exampleSeparator\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\\n\\n\"\n    });\n    Object.defineProperty(this, \"prefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, \"templateFormat\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"f-string\"\n    });\n    Object.defineProperty(this, \"validateTemplate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    this.examples = fields.examples;\n    this.examplePrompt = fields.examplePrompt;\n    this.exampleSeparator = fields.exampleSeparator ?? \"\\n\\n\";\n    this.exampleSelector = fields.exampleSelector;\n    this.prefix = fields.prefix ?? \"\";\n    this.suffix = fields.suffix ?? \"\";\n    this.templateFormat = fields.templateFormat ?? \"f-string\";\n    this.validateTemplate = fields.validateTemplate ?? true;\n    if (this.examples !== undefined && this.exampleSelector !== undefined) {\n      throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n    }\n    if (this.examples === undefined && this.exampleSelector === undefined) {\n      throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    if (this.validateTemplate) {\n      let totalInputVariables = this.inputVariables;\n      if (this.partialVariables) {\n        totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n      }\n      checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n    }\n  }\n  async getExamples(inputVariables) {\n    if (this.examples !== undefined) {\n      return this.examples;\n    }\n    if (this.exampleSelector !== undefined) {\n      return this.exampleSelector.selectExamples(inputVariables);\n    }\n    throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n  }\n  /**\n   * Formats the list of values and returns a list of formatted messages.\n   * @param values The values to format the prompt with.\n   * @returns A promise that resolves to a string representing the formatted prompt.\n   */\n  async formatMessages(values) {\n    const allValues = await this.mergePartialAndUserVariables(values);\n    let examples = await this.getExamples(allValues);\n    examples = examples.map(example => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const result = {};\n      this.examplePrompt.inputVariables.forEach(inputVariable => {\n        result[inputVariable] = example[inputVariable];\n      });\n      return result;\n    });\n    const messages = [];\n    for (const example of examples) {\n      const exampleMessages = await this.examplePrompt.formatMessages(example);\n      messages.push(...exampleMessages);\n    }\n    return messages;\n  }\n  /**\n   * Formats the prompt with the given values.\n   * @param values The values to format the prompt with.\n   * @returns A promise that resolves to a string representing the formatted prompt.\n   */\n  async format(values) {\n    const allValues = await this.mergePartialAndUserVariables(values);\n    const examples = await this.getExamples(allValues);\n    const exampleMessages = await Promise.all(examples.map(example => this.examplePrompt.formatMessages(example)));\n    const exampleStrings = exampleMessages.flat().map(message => message.content);\n    const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n    return renderTemplate(template, this.templateFormat, allValues);\n  }\n  /**\n   * Partially formats the prompt with the given values.\n   * @param values The values to partially format the prompt with.\n   * @returns A promise that resolves to an instance of `FewShotChatMessagePromptTemplate` with the given values partially formatted.\n   */\n  async partial(values) {\n    const newInputVariables = this.inputVariables.filter(variable => !(variable in values));\n    const newPartialVariables = {\n      ...(this.partialVariables ?? {}),\n      ...values\n    };\n    const promptDict = {\n      ...this,\n      inputVariables: newInputVariables,\n      partialVariables: newPartialVariables\n    };\n    return new FewShotChatMessagePromptTemplate(promptDict);\n  }\n}"],
  "mappings": "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",
  "names": ["input", "item"]
}
